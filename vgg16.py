# -*- coding: utf-8 -*-
"""vgg16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Tb4NGii_BqIISl6wgvg8pNOntq-FI4P
"""

import numpy as np
import pandas as pd
import glob
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
import cv2
from keras.applications import vgg16

from google.colab import drive
drive.mount('/content/drive')

cd'drive/My Drive'

ls

"""**Step 1 : preprocessing data i have 165 image for 8 celebrities 20 image per person.**"""

#######################################
path="8 celebirity/train/"
path_val="8 celebirity/val/preprocessed/"
people=["Kevin Hart" ,"ben_afflek" ,"dwayne_johnson" ,"elton_john" ,"jerry_seinfeld", "madonna" , "mindy_kaling", "Ryan Reynolds"]

########################################
df = pd.DataFrame({'celebrity': [],
                   'person': []
        })
df_val = pd.DataFrame({'celebrity': [],
                   'person': []
        })

# print(df)
for person_name in people:
    pepole_filePath=path+person_name+str("/*")
    for filepath in glob.glob(pepole_filePath):
        df2 = pd.DataFrame({'celebrity': [filepath],
                            'person': [person_name]
                            })

        df=df.append(df2)

for person_name in people:
    pepole_filePath=path_val+person_name+str("/*")
    for filepath in glob.glob(pepole_filePath):
        df2_val = pd.DataFrame({'celebrity': [filepath],
                            'person': [person_name]
                            })

        df_val=df_val.append(df2_val)

path_x_train,path_x_test,y_train,y_test =train_test_split(df['celebrity'],df['person'],test_size=0.30,random_state=42)
y_train=y_train.to_numpy()
y_test=y_test.to_numpy()

path_x_train_val,path_x_test_val,y_train_val,y_test_val =train_test_split(df_val['celebrity'],df_val['person'],test_size=0.000001,random_state=42)
y_train_val=y_train_val.to_numpy()
y_test_val=y_test_val.to_numpy()

print("x_train = ",path_x_train.shape)
print("x_test = ",path_x_test.shape)
print("y_train = ",y_train.shape)
print("y_test = ",y_test.shape)
print("--------------------------------------------")
print("x_train_val = ",path_x_train_val.shape)
print("x_test_val = ",path_x_test_val.shape)
print("y_train_val = ",y_train_val.shape)
print("y_test_val = ",y_test_val.shape)

input_shape=224
x_train=np.empty((0,input_shape,input_shape,3))
index=0
for i in path_x_train:
    img= cv2.imread(i)
    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    img=cv2.resize(img,(input_shape,input_shape))
    img=img/255.0
    img=np.reshape(img,(1,input_shape,input_shape,3))
    x_train=np.append(x_train,img,axis=0)

x_test=np.empty((0,input_shape,input_shape,3))
index=0
for i in path_x_test:
    img = cv2.imread(i)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (input_shape, input_shape))
    img = img / 255.0
    img = np.reshape(img, (1, input_shape, input_shape, 3))
    x_test = np.append(x_test, img, axis=0)
    
x_train_val=np.empty((0,input_shape,input_shape,3))
index=0
for i in path_x_train_val:
    img = cv2.imread(i)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (input_shape, input_shape))
    img = img / 255.0
    img = np.reshape(img, (1, input_shape, input_shape, 3))
    x_train_val = np.append(x_train_val, img, axis=0)

print("x_train = ",x_train.shape)
print("x_test = ",x_test.shape)
print("y_train = ",y_train.shape)
print("y_test = ",y_test.shape)
print("--------------------------------------------")
print("x_train_val = ",x_train_val.shape)
print("y_train_val = ",y_train_val.shape)

dec={ "Kevin Hart"    : 0 ,
      "ben_afflek"    : 1,
      "dwayne_johnson": 2,
      "elton_john"    : 3 ,
      "jerry_seinfeld": 4, 
      "madonna"       : 5, 
      "mindy_kaling"  : 6, 
      "Ryan Reynolds" : 7
}
index=0
for i in y_test:
    y_test[index]=dec[str(i)]
    index+=1

index=0
for i in y_train:
    y_train[index]=dec[str(i)]
    index+=1

index=0
for i in y_train_val:
    y_train_val[index]=dec[str(i)]
    index+=1

print("number of each class in in Trainng data")

unique, counts = np.unique(y_train, return_counts=True)
print(dict(zip(unique, counts)))
print("number of each class in in val data")
unique, counts = np.unique(y_test, return_counts=True)
print(dict(zip(unique, counts)))
print("number of each class in in val data")
unique, counts = np.unique(y_train_val, return_counts=True)
dict(zip(unique, counts))

y_train=to_categorical(y_train)
y_test=to_categorical(y_test)
y_train_val=to_categorical(y_train_val)

# import matplotlib.pyplot as plt
# ind=0
# for i in x_test:
#   plt.imshow(i)
#   plt.show()
#   print(y_test[ind])
#   ind+=1

print("x_train = ",x_train.shape)
print("x_test = ",x_test.shape)
print("y_train = ",y_train.shape)
print("y_test = ",y_test.shape)
print("--------------------------------------------")
print("x_train_val = ",x_train_val.shape)
print("y_train_val = ",y_train_val.shape)

# Commented out IPython magic to ensure Python compatibility.
# Load the TensorBoard notebook extension
# %load_ext tensorboard

# path="5-celebrity-faces-dataset/trainng/dwayne_johnson/*.jpg"
# x_val=np.empty((0,input_shape,input_shape,3))
# index=0
# for filepath in glob.glob(path):
#   img = cv2.imread(filepath)
#   img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
#   img = cv2.resize(img, (input_shape, input_shape))
#   img = img / 255.0
#   img = np.reshape(img, (1, input_shape, input_shape, 3))
#   x_val = np.append(x_val, img, axis=0)
# print(x_val.shape)

# y_val =[2]*65
# print(y_val)
# y_val=to_categorical(y_val,8)
# y_val.shape

from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
                            width_shift_range=0.2,
                            height_shift_range=0.2,
                            shear_range=0.15,
                              vertical_flip=True,
                            fill_mode="nearest")

# import matplotlib.pyplot as plt
# dec={    0:"Kevin Hart"  ,
#          1:"ben_afflek"    ,
#          2:"dwayne_johnson",
#          3:"elton_john"     ,
#          4:"jerry_seinfeld", 
#          5:"madonna"       , 
#          6:"mindy_kaling"  , 
#          7:"Ryan Reynolds" 
# }
# ind=0
# for i in x_val:
#   plt.imshow(i)
#   plt.show()
#   r=np.where((y_val[ind])==1)
#   print(dec[int(r[0])])
#   ind+=1

from keras.applications import vgg16
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout,BatchNormalization
from keras.optimizers import Adam
import os,datetime
import keras.callbacks
model = Sequential()

# model.add(Conv2D(input_shape=(input_shape,input_shape,3),filters=32,kernel_size=(3,3),padding="same", activation="relu"))
# model.add(MaxPool2D(pool_size=(2, 2)))
# model.add(Dropout(0.2))

# model.add(Conv2D(filters=64, kernel_size=(3,3), padding="same", activation="relu"))
# model.add(MaxPool2D(pool_size=(2, 2)))
# model.add(Dropout(0.2))

# model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
# model.add(MaxPool2D(pool_size=(2, 2)))
# model.add(Dropout(0.2))
#########################################3
# model.add(Conv2D(filters=128, kernel_size=(3,3),strides=(2, 2), padding="same", activation="relu"))

# model.add(Conv2D(filters=256, kernel_size=(3,3),strides=(2, 2), padding="same", activation="relu"))
# model.add(Dropout(0.2))

# model.add(BatchNormalization())
# model.add(Dropout(0.5))
#######################################
# model.add(Flatten())
# model.add(Dense(512,activation="relu"))
# model.add(Dense(8, activation="softmax"))
# model.add(MaxPool2D(pool_size=(2, 2)))

vgg16_model=vgg16.VGG16()
vgg16_model.summary()
# conver vgg_model from type(x) to sequential
model=Sequential()
for layer in vgg16_model.layers:
  model.add(layer)
model.pop()
for layer in model.layers:
    layer.trainable="False"
model.add(Dense(8,activation="softmax"))

model.summary()
model.compile(Adam(lr=.0001),loss='categorical_crossentropy',metrics=['accuracy'])

logdir = os.path.join("logs", datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = keras.callbacks.TensorBoard(logdir, histogram_freq=1)

model.fit(datagen.flow(x_train , y_train),batch_size=1000,
          epochs=130,verbose=1,validation_data=(x_test,y_test),callbacks=[tensorboard_callback])

k2k3=model.evaluate(x_test ,y_test)
print(k2k3)
      
k2k=model.evaluate(x_train_val ,y_train_val)
print(k2k)

k2k34=model.evaluate(x_train ,y_train)
print(k2k34)

import matplotlib.pyplot as plt
ind=0
for i in x_train_val:
  plt.imshow(i)
  plt.show()
  print(y_train_val[ind])
  ind+=1

print("x_train = ",x_train.shape)
print("x_test = ",x_test.shape)
print("y_train = ",y_train.shape)
print("y_test = ",y_test.shape)
print("--------------------------------------------")
print("x_train_val = ",x_train_val.shape)
print("y_train_val = ",y_train_val.shape)

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs

model.save("face73.h5")

from tensorboard import notebook
notebook.list()

notebook.display(port=6006, height=1000)